{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst gravatar = require('gravatar');\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst config = require('config');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst User = require('../../models/User'); //POST api/users\n\n\nrouter.post('/', [check('name', 'Name is required').not().isEmpty(), check('email', 'Please include a valid email').isEmail(), check('password', 'Password must be at least 6 characters long').isLength({\n  min: 6\n})], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    // See if user exists\n    let user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(400).json({\n        errors: [{\n          message: 'User already exists'\n        }]\n      });\n    } // Get users gravatar\n\n\n    const avatar = gravatar.url(email, {\n      size: '200',\n      rating: 'pg',\n      default: 'mm'\n    });\n    user = new User({\n      name,\n      email,\n      avatar,\n      password\n    }); // Encrypt the password\n\n    const salt = await bcrypt.genSalt(10);\n    user.password = await bcrypt.hash(password, salt);\n    await user.save(); // Return jsonwebtoken\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jwt.sign(payload, config.get('jwtSecret'), {\n      expiresIn: 360000\n    }, (err, token) => {\n      if (err) throw err;\n      res.json({\n        token\n      });\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Users/Dell/Desktop/socialnetwork/routes/api/users.js"],"names":["express","require","router","Router","gravatar","bcrypt","jwt","config","check","validationResult","User","post","not","isEmpty","isEmail","isLength","min","req","res","errors","status","json","array","name","email","password","body","user","findOne","message","avatar","url","size","rating","default","salt","genSalt","hash","save","payload","id","sign","get","expiresIn","err","token","console","error","send","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst gravatar = require('gravatar');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst config = require('config');\r\nconst { check, validationResult } = require('express-validator');\r\n\r\nconst User = require('../../models/User');\r\n//POST api/users\r\nrouter.post('/', [\r\n\r\ncheck('name', 'Name is required').not().isEmpty(),\r\ncheck('email', 'Please include a valid email').isEmail(),\r\ncheck('password', 'Password must be at least 6 characters long').isLength({ min: 6 })\r\n\r\n], async (req, res) => {\r\n\r\n    const errors = validationResult(req);\r\n\r\n    if(!errors.isEmpty()) {\r\n\r\n        return res.status(400).json({ errors: errors.array() });\r\n    }\r\n\r\n    const { name, email, password } = req.body;\r\n\r\n    try {\r\n\r\n    // See if user exists\r\n    let user = await User.findOne({ email });\r\n\r\n    if(user) {\r\n\r\n       return res.status(400).json({errors: [{ message: 'User already exists' }]})\r\n    }\r\n    // Get users gravatar\r\n    const avatar = gravatar.url(email, {\r\n\r\n        size: '200',\r\n        rating: 'pg',\r\n        default: 'mm'\r\n    })\r\n\r\n    user = new User({\r\n\r\n        name,\r\n        email,\r\n        avatar,\r\n        password\r\n    })\r\n    // Encrypt the password\r\n    const salt = await bcrypt.genSalt(10)\r\n    user.password = await bcrypt.hash(password, salt);\r\n\r\n    await user.save();\r\n\r\n   // Return jsonwebtoken\r\n    const payload = {\r\n\r\n        user: {\r\n\r\n            id: user.id\r\n        }\r\n    }\r\n\r\n    jwt.sign(payload, config.get('jwtSecret'),\r\n    \r\n    {expiresIn: 360000},\r\n\r\n    (err, token) => {\r\n\r\n       if(err) throw err;\r\n\r\n       res.json({ token });\r\n    })\r\n\r\n\r\n    }catch(err) {\r\n\r\n      console.error(err.message);\r\n      res.status(500).send('Server error');\r\n    }\r\n\r\n   \r\n});\r\n\r\nmodule.exports = router;"]},"metadata":{},"sourceType":"script"}