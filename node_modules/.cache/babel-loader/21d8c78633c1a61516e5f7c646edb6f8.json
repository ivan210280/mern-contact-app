{"ast":null,"code":"import { ADD_COMMENT, ADD_POST, DELETE_POST, GET_POST, GET_POSTS, POST_ERROR, UPDATE_LIKES } from \"./types\";\nimport axios from 'axios';\nimport { setAlert } from './alertAction'; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get Post\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Post\n\nexport const addPost = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.post('/api/posts', body, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post added successfully', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Comment\n\nexport const addComment = (formData, id) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.post(`/api/posts/comment/${id}`, body, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment added successfully', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Like\n\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove Like\n\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete post \n\nexport const deletePost = id => async dispatch => {\n  await axios.delete(`/api/posts/${id}`);\n  dispatch({\n    type: DELETE_POST,\n    payload: id\n  });\n  dispatch(setAlert('Post removed successfully', 'success'));\n\n  try {} catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove Comment\n\nexport const removeComment = id => async dispatch => {\n  try {\n    await axios.remove();\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Dell/Desktop/socialnetwork/client/src/actions/postAction.js"],"names":["ADD_COMMENT","ADD_POST","DELETE_POST","GET_POST","GET_POSTS","POST_ERROR","UPDATE_LIKES","axios","setAlert","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getPost","id","addPost","formData","config","headers","body","JSON","stringify","post","addComment","addLike","put","likes","removeLike","deletePost","delete","removeComment","remove"],"mappings":"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","sourcesContent":["import { \r\n    ADD_COMMENT,\r\n    ADD_POST,\r\n     DELETE_POST, \r\n     GET_POST, \r\n     GET_POSTS,\r\n      POST_ERROR, \r\n      UPDATE_LIKES \r\n    } from \"./types\";\r\nimport axios from 'axios';\r\nimport { setAlert } from './alertAction';\r\n\r\n// Get posts\r\nexport const getPosts = () => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await axios.get('/api/posts');\r\n\r\n        dispatch({\r\n\r\n            type: GET_POSTS,\r\n            payload: res.data\r\n        })\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: POST_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Get Post\r\nexport const getPost = (id) => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await axios.get(`/api/posts/${id}`);\r\n\r\n        dispatch({\r\n\r\n            type: GET_POST,\r\n            payload: res.data\r\n        })\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: POST_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Add Post\r\nexport const addPost = formData => async dispatch => {\r\n\r\n    try {\r\n\r\n        const config = {\r\n\r\n            headers: {\r\n\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const body = JSON.stringify(formData);\r\n\r\n        const res = await axios.post('/api/posts', body, config);\r\n\r\n        dispatch({\r\n\r\n            type: ADD_POST,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch(setAlert('Post added successfully', 'success'))\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: POST_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Add Comment\r\nexport const addComment = (formData, id) => async dispatch => {\r\n\r\n    try {\r\n\r\n        const config = {\r\n\r\n            headers: {\r\n\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const body = JSON.stringify(formData)\r\n\r\n        const res = await axios.post(`/api/posts/comment/${id}`, body, config);\r\n\r\n        dispatch({\r\n\r\n            type: ADD_COMMENT,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch(setAlert('Comment added successfully', 'success'));\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: POST_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n// Add Like\r\nexport const addLike = id => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await axios.put(`/api/posts/like/${id}`);\r\n\r\n        dispatch({\r\n\r\n            type: UPDATE_LIKES,\r\n            payload: { id, likes: res.data }\r\n        })\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: POST_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n// Remove Like\r\nexport const removeLike = id => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await axios.put(`/api/posts/unlike/${id}`);\r\n\r\n        dispatch({\r\n\r\n            type: UPDATE_LIKES,\r\n            payload: { id, likes: res.data }\r\n        })\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: POST_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n// Delete post \r\nexport const deletePost = id => async dispatch => {\r\n\r\n    await axios.delete(`/api/posts/${id}`);\r\n\r\n    dispatch({\r\n\r\n        type: DELETE_POST,\r\n        payload: id\r\n    })\r\n\r\n    dispatch(setAlert('Post removed successfully', 'success'));\r\n\r\n    try {\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: POST_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Remove Comment\r\nexport const removeComment = (id) => async dispatch => {\r\n\r\n    try {\r\n\r\n        await axios.remove()\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: POST_ERROR,\r\n            payload: {msg: err.response.statusText, status: err.response.status}\r\n        })\r\n        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}