{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst auth = require('../../middleware/auth');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst request = require('request');\n\nconst config = require('config');\n\nconst Profile = require('../../models/Profile');\n\nconst User = require('../../models/User'); //GET api/profile/me\n// GET api/profiles - all profile users\n//me - user id thats in the token\n\n\nrouter.get('/me', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }).populate({\n      model: 'User',\n      path: 'user',\n      select: ['name', 'avatar']\n    });\n\n    if (!profile) {\n      return res.status(400).json({\n        message: 'There is no profile for this user'\n      });\n    }\n\n    res.send(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n}); // POST api/profile\n// Create or update user profile\n\nrouter.post('/', [auth, [check('status', 'Status is required').not().isEmpty(), check('skills', 'Skills is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    company,\n    website,\n    location,\n    bio,\n    status,\n    githubusername,\n    skills,\n    facebook,\n    twitter,\n    instagram,\n    linkedin\n  } = req.body; //Build profile object\n\n  const profileFields = {};\n  profileFields.user = req.user.id;\n  if (company) profileFields.company = company;\n  if (website) profileFields.website = website;\n  if (location) profileFields.location = location;\n  if (bio) profileFields.bio = bio;\n  if (status) profileFields.status = status;\n  if (githubusername) profileFields.githubusername = githubusername;\n\n  if (skills) {\n    profileFields.skills = skills.split(',').map(skill => skill.trim());\n  } //Bield social object\n\n\n  profileFields.social = {};\n  if (facebook) profileFields.social.facebook = facebook;\n  if (twitter) profileFields.social.twitter = twitter;\n  if (instagram) profileFields.social.instagram = instagram;\n  if (linkedin) profileFields.social.linkedin = linkedin;\n\n  try {\n    let profile = await Profile.findOne({\n      user: req.user.id\n    });\n\n    if (profile) {\n      //Update\n      profile = await Profile.findOneAndUpdate({\n        user: req.user.id\n      }, {\n        $set: profileFields\n      }, {\n        new: true\n      });\n      return res.send(profile);\n    } //Create Profile\n\n\n    profile = new Profile(profileFields);\n    await profile.save();\n    res.send(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); //GET api/profile\n// Get all profiles\n\nrouter.get('/', async (req, res) => {\n  try {\n    const profiles = await Profile.find().populate({\n      model: 'User',\n      path: 'user',\n      select: ['name', 'avatar']\n    });\n\n    if (!profiles) {\n      return res.status(400).json({\n        message: 'There is no profiles for this user'\n      });\n    }\n\n    res.send(profiles);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // GET api/profile/user/:user_id\n// Get profile by user ID\n\nrouter.get('/user/:user_id', async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.params.user_id\n    }).populate({\n      model: 'User',\n      path: 'user',\n      select: ['name', 'avatar']\n    });\n\n    if (!profile) {\n      return res.status(400).json({\n        message: 'There is no profile for this user'\n      });\n    }\n\n    res.send(profile);\n  } catch (err) {\n    console.error(err.message);\n\n    if (err.kind == 'ObjectId') {\n      return res.status(400).json({\n        message: 'Profile not found'\n      });\n    }\n\n    res.status(500).send('Server Error');\n  }\n}); // GET api/profile/github/:username\n// Get user repos from Github\n\nrouter.get('/github/:username', async (req, res) => {\n  try {\n    const options = {\n      uri: `https://api.github.com/users/${req.params.username}/repos?per_page=5&sort=created:asc&client_id=${config.get('githubClientId')}&client_secret=${config.get('githubClientSecret')}`,\n      method: 'GET',\n      headers: {\n        'user-agent': 'node.js'\n      }\n    };\n    request(options, (error, response, body) => {\n      if (error) console.error(error);\n\n      if (response.statusCode !== 200) {\n        return res.status(404).json({\n          message: 'No Github profile found'\n        });\n      }\n\n      res.send(JSON.parse(body));\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // PUT api/profile/experience\n// Add profile experience\n\nrouter.put('/experience', [auth, [check('title', 'Title is required').not().isEmpty(), check('company', 'Company is required').not().isEmpty(), // check('to', 'To date is required').not().isEmpty(),\ncheck('from', 'From date is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    title,\n    company,\n    location,\n    from,\n    to,\n    current,\n    description\n  } = req.body;\n  const newExperience = {\n    title,\n    company,\n    location,\n    from,\n    to,\n    current,\n    description\n  };\n\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    });\n    profile.experience.unshift(newExperience);\n    await profile.save();\n    res.send(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // PUT api/profile/education\n// Add profile education\n\nrouter.put('/education', [auth, [check('school', 'School is required').not().isEmpty(), check('degree', 'Degree is required').not().isEmpty(), check('fieldofstudy', 'Field of study is required').not().isEmpty(), check('from', 'From date is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    school,\n    degree,\n    fieldofstudy,\n    from,\n    to,\n    current,\n    description\n  } = req.body;\n  const newEducation = {\n    school,\n    degree,\n    fieldofstudy,\n    from,\n    to,\n    current,\n    description\n  };\n\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    });\n    profile.education.unshift(newEducation);\n    await profile.save();\n    res.send(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); //DELETE api/education\n// Delete education\n\nrouter.delete('/education/:edu_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }); //Get removeIndex\n\n    const removeIndex = profile.education.map(item => item.id).indexOf(req.params.edu_id);\n    profile.education.splice(removeIndex, 1);\n    await profile.save();\n    res.send(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // DELETE api/profile\n// Delete profile, user & posts\n\nrouter.delete('/', auth, async (req, res) => {\n  try {\n    //Remove Profile\n    await Profile.findOneAndRemove({\n      user: req.user.id\n    }); //Remove User\n\n    await User.findOneAndRemove({\n      _id: req.user.id\n    });\n    res.send({\n      message: 'User deleted successfully'\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // DELETE api/profile/experience/:exp_id\n// Delete experience from profile\n\nrouter.delete('/experience/:exp_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }); //Get remove index\n\n    const removeIndex = profile.experience.map(item => item.id).indexOf(req.params.exp_id);\n    profile.experience.splice(removeIndex, 1);\n    await profile.save();\n    res.send(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Users/Dell/Desktop/socialnetwork/routes/api/profile.js"],"names":["express","require","router","Router","auth","check","validationResult","request","config","Profile","User","get","req","res","profile","findOne","user","id","populate","model","path","select","status","json","message","send","err","console","error","post","not","isEmpty","errors","array","company","website","location","bio","githubusername","skills","facebook","twitter","instagram","linkedin","body","profileFields","split","map","skill","trim","social","findOneAndUpdate","$set","new","save","profiles","find","params","user_id","kind","options","uri","username","method","headers","response","statusCode","JSON","parse","put","title","from","to","current","description","newExperience","experience","unshift","school","degree","fieldofstudy","newEducation","education","delete","removeIndex","item","indexOf","edu_id","splice","findOneAndRemove","_id","exp_id","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf;;AACA,MAAMC,IAAI,GAAGH,OAAO,CAAC,uBAAD,CAApB;;AACA,MAAM;AAAEI,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAA8BL,OAAO,CAAC,mBAAD,CAA3C;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMO,MAAM,GAAGP,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMQ,OAAO,GAAGR,OAAO,CAAC,sBAAD,CAAvB;;AACA,MAAMS,IAAI,GAAGT,OAAO,CAAC,mBAAD,CAApB,C,CAEA;AACA;AACA;;;AACAC,MAAM,CAACS,GAAP,CAAW,KAAX,EAAkBP,IAAlB,EAAwB,OAAOQ,GAAP,EAAYC,GAAZ,KAAoB;AAExC,MAAI;AAEA,UAAMC,OAAO,GAAG,MAAML,OAAO,CAACM,OAAR,CAAgB;AAAEC,MAAAA,IAAI,EAAEJ,GAAG,CAACI,IAAJ,CAASC;AAAjB,KAAhB,EAAuCC,QAAvC,CAAgD;AAACC,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,IAAI,EAAE,MAAtB;AAA8BC,MAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,QAAT;AAAtC,KAAhD,CAAtB;;AAEA,QAAG,CAACP,OAAJ,EAAa;AAET,aAAOD,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACH;;AAEDX,IAAAA,GAAG,CAACY,IAAJ,CAASX,OAAT;AAGH,GAZD,CAYC,OAAMY,GAAN,EAAW;AAERC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACF,OAAlB;AACAX,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB,cAArB;AACH;AACJ,CAnBD,E,CAqBA;AACA;;AACAvB,MAAM,CAAC2B,IAAP,CAAY,GAAZ,EAAiB,CAACzB,IAAD,EAAO,CAEvBC,KAAK,CAAC,QAAD,EAAW,oBAAX,CAAL,CAAsCyB,GAAtC,GAA4CC,OAA5C,EAFuB,EAGvB1B,KAAK,CAAC,QAAD,EAAW,oBAAX,CAAL,CAAsCyB,GAAtC,GAA4CC,OAA5C,EAHuB,CAAP,CAAjB,EAKI,OAAOnB,GAAP,EAAYC,GAAZ,KAAoB;AAEpB,QAAMmB,MAAM,GAAG1B,gBAAgB,CAACM,GAAD,CAA/B;;AAEA,MAAG,CAACoB,MAAM,CAACD,OAAP,EAAJ,EAAsB;AAElB,WAAOlB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAES,MAAAA,MAAM,EAAEA,MAAM,CAACC,KAAP;AAAV,KAArB,CAAP;AACH;;AAED,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,GAA7B;AAAkCf,IAAAA,MAAlC;AAA0CgB,IAAAA,cAA1C;AAA0DC,IAAAA,MAA1D;AAAkEC,IAAAA,QAAlE;AAA4EC,IAAAA,OAA5E;AAAqFC,IAAAA,SAArF;AAAgGC,IAAAA;AAAhG,MAA6G/B,GAAG,CAACgC,IAAvH,CAToB,CAWpB;;AACA,QAAMC,aAAa,GAAG,EAAtB;AACAA,EAAAA,aAAa,CAAC7B,IAAd,GAAqBJ,GAAG,CAACI,IAAJ,CAASC,EAA9B;AACA,MAAGiB,OAAH,EAAYW,aAAa,CAACX,OAAd,GAAwBA,OAAxB;AACZ,MAAGC,OAAH,EAAYU,aAAa,CAACV,OAAd,GAAwBA,OAAxB;AACZ,MAAGC,QAAH,EAAaS,aAAa,CAACT,QAAd,GAAyBA,QAAzB;AACb,MAAGC,GAAH,EAAQQ,aAAa,CAACR,GAAd,GAAoBA,GAApB;AACR,MAAGf,MAAH,EAAWuB,aAAa,CAACvB,MAAd,GAAuBA,MAAvB;AACX,MAAGgB,cAAH,EAAmBO,aAAa,CAACP,cAAd,GAA+BA,cAA/B;;AACnB,MAAGC,MAAH,EAAW;AAEPM,IAAAA,aAAa,CAACN,MAAd,GAAuBA,MAAM,CAACO,KAAP,CAAa,GAAb,EAAkBC,GAAlB,CAAsBC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAA/B,CAAvB;AACH,GAvBmB,CAyBpB;;;AACAJ,EAAAA,aAAa,CAACK,MAAd,GAAuB,EAAvB;AAEA,MAAGV,QAAH,EAAaK,aAAa,CAACK,MAAd,CAAqBV,QAArB,GAAgCA,QAAhC;AACb,MAAGC,OAAH,EAAYI,aAAa,CAACK,MAAd,CAAqBT,OAArB,GAA+BA,OAA/B;AACZ,MAAGC,SAAH,EAAcG,aAAa,CAACK,MAAd,CAAqBR,SAArB,GAAiCA,SAAjC;AACd,MAAGC,QAAH,EAAaE,aAAa,CAACK,MAAd,CAAqBP,QAArB,GAAgCA,QAAhC;;AAEZ,MAAI;AAED,QAAI7B,OAAO,GAAG,MAAML,OAAO,CAACM,OAAR,CAAgB;AAAEC,MAAAA,IAAI,EAAEJ,GAAG,CAACI,IAAJ,CAASC;AAAjB,KAAhB,CAApB;;AAEA,QAAGH,OAAH,EAAY;AAER;AACAA,MAAAA,OAAO,GAAG,MAAML,OAAO,CAAC0C,gBAAR,CAEZ;AAACnC,QAAAA,IAAI,EAAEJ,GAAG,CAACI,IAAJ,CAASC;AAAhB,OAFY,EAGZ;AAACmC,QAAAA,IAAI,EAAEP;AAAP,OAHY,EAIZ;AAACQ,QAAAA,GAAG,EAAE;AAAN,OAJY,CAAhB;AAOA,aAAOxC,GAAG,CAACY,IAAJ,CAASX,OAAT,CAAP;AACH,KAfA,CAiBD;;;AACAA,IAAAA,OAAO,GAAG,IAAIL,OAAJ,CAAYoC,aAAZ,CAAV;AAEA,UAAM/B,OAAO,CAACwC,IAAR,EAAN;AAEAzC,IAAAA,GAAG,CAACY,IAAJ,CAASX,OAAT;AAGF,GAzBD,CAyBC,OAAMY,GAAN,EAAW;AAETC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACF,OAAlB;AACAX,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB,cAArB;AACF;AAGL,CAtED,E,CAyEA;AACA;;AACAvB,MAAM,CAACS,GAAP,CAAW,GAAX,EAAgB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAEhC,MAAI;AAEA,UAAM0C,QAAQ,GAAG,MAAM9C,OAAO,CAAC+C,IAAR,GAAetC,QAAf,CAAwB;AAACC,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,IAAI,EAAE,MAAtB;AAA8BC,MAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,QAAT;AAAtC,KAAxB,CAAvB;;AAEA,QAAG,CAACkC,QAAJ,EAAc;AAEV,aAAO1C,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACH;;AAEDX,IAAAA,GAAG,CAACY,IAAJ,CAAS8B,QAAT;AAGH,GAZD,CAYC,OAAM7B,GAAN,EAAW;AAERC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACF,OAAlB;AACAX,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB,cAArB;AACH;AACJ,CAnBD,E,CAsBA;AACA;;AACAvB,MAAM,CAACS,GAAP,CAAW,gBAAX,EAA6B,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAE7C,MAAI;AAEA,UAAMC,OAAO,GAAG,MAAML,OAAO,CAACM,OAAR,CAAgB;AAACC,MAAAA,IAAI,EAAEJ,GAAG,CAAC6C,MAAJ,CAAWC;AAAlB,KAAhB,EAA4CxC,QAA5C,CAAqD;AAAEC,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,IAAI,EAAE,MAAvB;AAA+BC,MAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,QAAT;AAAvC,KAArD,CAAtB;;AAEA,QAAG,CAACP,OAAJ,EAAa;AAET,aAAOD,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAE;AAAV,OAArB,CAAP;AACH;;AAEDX,IAAAA,GAAG,CAACY,IAAJ,CAASX,OAAT;AAGH,GAZD,CAYC,OAAMY,GAAN,EAAW;AAERC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACF,OAAlB;;AAEA,QAAGE,GAAG,CAACiC,IAAJ,IAAY,UAAf,EAA2B;AAEvB,aAAO9C,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACH;;AACDX,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB,cAArB;AACH;AACJ,CAxBD,E,CA2BA;AACA;;AACAvB,MAAM,CAACS,GAAP,CAAW,mBAAX,EAAgC,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAEhD,MAAI;AAEA,UAAM+C,OAAO,GAAG;AAEdC,MAAAA,GAAG,EAAG,gCAA+BjD,GAAG,CAAC6C,MAAJ,CAAWK,QAAS,gDAA+CtD,MAAM,CAACG,GAAP,CAAW,gBAAX,CAA6B,kBAAiBH,MAAM,CAACG,GAAP,CAAW,oBAAX,CAAiC,EAFzK;AAIdoD,MAAAA,MAAM,EAAE,KAJM;AAKdC,MAAAA,OAAO,EAAE;AAAE,sBAAc;AAAhB;AALK,KAAhB;AAQAzD,IAAAA,OAAO,CAACqD,OAAD,EAAU,CAAChC,KAAD,EAAQqC,QAAR,EAAkBrB,IAAlB,KAA2B;AAExC,UAAGhB,KAAH,EAAUD,OAAO,CAACC,KAAR,CAAcA,KAAd;;AAEV,UAAGqC,QAAQ,CAACC,UAAT,KAAwB,GAA3B,EAAgC;AAE7B,eAAOrD,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB,CAAP;AACF;;AAEDX,MAAAA,GAAG,CAACY,IAAJ,CAAS0C,IAAI,CAACC,KAAL,CAAWxB,IAAX,CAAT;AACH,KAVM,CAAP;AAYH,GAtBD,CAsBE,OAAOlB,GAAP,EAAY;AAEVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACF,OAAlB;AACAX,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB,cAArB;AAEH;AAGJ,CAhCD,E,CAoCA;AACA;;AACAvB,MAAM,CAACmE,GAAP,CAAW,aAAX,EAA0B,CAACjE,IAAD,EAAO,CAE9BC,KAAK,CAAC,OAAD,EAAU,mBAAV,CAAL,CAAoCyB,GAApC,GAA0CC,OAA1C,EAF8B,EAG9B1B,KAAK,CAAC,SAAD,EAAY,qBAAZ,CAAL,CAAwCyB,GAAxC,GAA8CC,OAA9C,EAH8B,EAI/B;AACC1B,KAAK,CAAC,MAAD,EAAS,uBAAT,CAAL,CAAuCyB,GAAvC,GAA6CC,OAA7C,EAL8B,CAAP,CAA1B,EAQI,OAAOnB,GAAP,EAAYC,GAAZ,KAAoB;AAEpB,QAAMmB,MAAM,GAAG1B,gBAAgB,CAACM,GAAD,CAA/B;;AACA,MAAG,CAACoB,MAAM,CAACD,OAAP,EAAJ,EAAsB;AAElB,WAAOlB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAES,MAAAA,MAAM,EAAEA,MAAM,CAACC,KAAP;AAAV,KAArB,CAAP;AACH;;AAED,QAAM;AAACqC,IAAAA,KAAD;AAAQpC,IAAAA,OAAR;AAAiBE,IAAAA,QAAjB;AAA2BmC,IAAAA,IAA3B;AAAiCC,IAAAA,EAAjC;AAAqCC,IAAAA,OAArC;AAA8CC,IAAAA;AAA9C,MAA8D9D,GAAG,CAACgC,IAAxE;AAEA,QAAM+B,aAAa,GAAG;AAElBL,IAAAA,KAFkB;AAGlBpC,IAAAA,OAHkB;AAIlBE,IAAAA,QAJkB;AAKlBmC,IAAAA,IALkB;AAMlBC,IAAAA,EANkB;AAOlBC,IAAAA,OAPkB;AAQlBC,IAAAA;AARkB,GAAtB;;AAWA,MAAI;AAEA,UAAM5D,OAAO,GAAG,MAAML,OAAO,CAACM,OAAR,CAAgB;AAAEC,MAAAA,IAAI,EAAEJ,GAAG,CAACI,IAAJ,CAASC;AAAjB,KAAhB,CAAtB;AAEAH,IAAAA,OAAO,CAAC8D,UAAR,CAAmBC,OAAnB,CAA2BF,aAA3B;AAEA,UAAM7D,OAAO,CAACwC,IAAR,EAAN;AAEAzC,IAAAA,GAAG,CAACY,IAAJ,CAASX,OAAT;AAGH,GAXD,CAWC,OAAMY,GAAN,EAAW;AAERC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACF,OAAlB;AACAX,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB,cAArB;AACH;AAEJ,CA9CD,E,CAiDA;AACA;;AACAvB,MAAM,CAACmE,GAAP,CAAW,YAAX,EAAyB,CAACjE,IAAD,EAAO,CAEhCC,KAAK,CAAC,QAAD,EAAW,oBAAX,CAAL,CAAsCyB,GAAtC,GAA4CC,OAA5C,EAFgC,EAGhC1B,KAAK,CAAC,QAAD,EAAW,oBAAX,CAAL,CAAsCyB,GAAtC,GAA4CC,OAA5C,EAHgC,EAIhC1B,KAAK,CAAC,cAAD,EAAiB,4BAAjB,CAAL,CAAoDyB,GAApD,GAA0DC,OAA1D,EAJgC,EAKhC1B,KAAK,CAAC,MAAD,EAAS,uBAAT,CAAL,CAAuCyB,GAAvC,GAA6CC,OAA7C,EALgC,CAAP,CAAzB,EAOI,OAAOnB,GAAP,EAAYC,GAAZ,KAAoB;AAErB,QAAMmB,MAAM,GAAG1B,gBAAgB,CAACM,GAAD,CAA/B;;AACA,MAAG,CAACoB,MAAM,CAACD,OAAP,EAAJ,EAAsB;AAErB,WAAOlB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAES,MAAAA,MAAM,EAAEA,MAAM,CAACC,KAAP;AAAV,KAArB,CAAP;AACA;;AAED,QAAM;AAAC6C,IAAAA,MAAD;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,YAAjB;AAA+BT,IAAAA,IAA/B;AAAsCC,IAAAA,EAAtC;AAA0CC,IAAAA,OAA1C;AAAmDC,IAAAA;AAAnD,MAAkE9D,GAAG,CAACgC,IAA5E;AAEA,QAAMqC,YAAY,GAAG;AAEpBH,IAAAA,MAFoB;AAGpBC,IAAAA,MAHoB;AAIpBC,IAAAA,YAJoB;AAKpBT,IAAAA,IALoB;AAMpBC,IAAAA,EANoB;AAOpBC,IAAAA,OAPoB;AAQpBC,IAAAA;AARoB,GAArB;;AAYA,MAAI;AAEH,UAAM5D,OAAO,GAAG,MAAML,OAAO,CAACM,OAAR,CAAgB;AAAEC,MAAAA,IAAI,EAAEJ,GAAG,CAACI,IAAJ,CAASC;AAAjB,KAAhB,CAAtB;AAEAH,IAAAA,OAAO,CAACoE,SAAR,CAAkBL,OAAlB,CAA0BI,YAA1B;AAEA,UAAMnE,OAAO,CAACwC,IAAR,EAAN;AAEAzC,IAAAA,GAAG,CAACY,IAAJ,CAASX,OAAT;AAEA,GAVD,CAUE,OAAOY,GAAP,EAAY;AAEbC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACF,OAAlB;AACAX,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB,cAArB;AAEA;AACH,CA7CD,E,CA+CA;AACA;;AACAvB,MAAM,CAACiF,MAAP,CAAc,oBAAd,EAAoC/E,IAApC,EAA0C,OAAOQ,GAAP,EAAYC,GAAZ,KAAoB;AAE1D,MAAI;AAEA,UAAMC,OAAO,GAAG,MAAML,OAAO,CAACM,OAAR,CAAgB;AAAEC,MAAAA,IAAI,EAAEJ,GAAG,CAACI,IAAJ,CAASC;AAAjB,KAAhB,CAAtB,CAFA,CAIA;;AACA,UAAMmE,WAAW,GAAGtE,OAAO,CAACoE,SAAR,CAAkBnC,GAAlB,CAAsBsC,IAAI,IAAIA,IAAI,CAACpE,EAAnC,EAAuCqE,OAAvC,CAA+C1E,GAAG,CAAC6C,MAAJ,CAAW8B,MAA1D,CAApB;AAEAzE,IAAAA,OAAO,CAACoE,SAAR,CAAkBM,MAAlB,CAAyBJ,WAAzB,EAAsC,CAAtC;AAEA,UAAMtE,OAAO,CAACwC,IAAR,EAAN;AAEAzC,IAAAA,GAAG,CAACY,IAAJ,CAASX,OAAT;AAEH,GAbD,CAaE,OAAOY,GAAP,EAAY;AAEVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACF,OAAlB;AACAX,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB,cAArB;AAEH;AACJ,CArBD,E,CAwBA;AACA;;AACAvB,MAAM,CAACiF,MAAP,CAAc,GAAd,EAAmB/E,IAAnB,EAAyB,OAAOQ,GAAP,EAAYC,GAAZ,KAAoB;AAEzC,MAAI;AACN;AACE,UAAMJ,OAAO,CAACgF,gBAAR,CAAyB;AAAEzE,MAAAA,IAAI,EAAEJ,GAAG,CAACI,IAAJ,CAASC;AAAjB,KAAzB,CAAN,CAFI,CAIL;;AACC,UAAMP,IAAI,CAAC+E,gBAAL,CAAsB;AAACC,MAAAA,GAAG,EAAE9E,GAAG,CAACI,IAAJ,CAASC;AAAf,KAAtB,CAAN;AAIAJ,IAAAA,GAAG,CAACY,IAAJ,CAAS;AAAED,MAAAA,OAAO,EAAE;AAAX,KAAT;AACC,GAVD,CAUC,OAAME,GAAN,EAAW;AAERC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACF,OAAlB;AACAX,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB,cAArB;AACH;AACJ,CAjBD,E,CAoBA;AACA;;AACAvB,MAAM,CAACiF,MAAP,CAAc,qBAAd,EAAqC/E,IAArC,EAA2C,OAAOQ,GAAP,EAAYC,GAAZ,KAAoB;AAE3D,MAAI;AAEA,UAAMC,OAAO,GAAG,MAAML,OAAO,CAACM,OAAR,CAAgB;AAAEC,MAAAA,IAAI,EAAEJ,GAAG,CAACI,IAAJ,CAASC;AAAjB,KAAhB,CAAtB,CAFA,CAIA;;AACA,UAAMmE,WAAW,GAAGtE,OAAO,CAAC8D,UAAR,CAAmB7B,GAAnB,CAAuBsC,IAAI,IAAIA,IAAI,CAACpE,EAApC,EAAwCqE,OAAxC,CAAgD1E,GAAG,CAAC6C,MAAJ,CAAWkC,MAA3D,CAApB;AAEA7E,IAAAA,OAAO,CAAC8D,UAAR,CAAmBY,MAAnB,CAA0BJ,WAA1B,EAAuC,CAAvC;AAEA,UAAMtE,OAAO,CAACwC,IAAR,EAAN;AAEAzC,IAAAA,GAAG,CAACY,IAAJ,CAASX,OAAT;AAEH,GAbD,CAaE,OAAOY,GAAP,EAAY;AAEVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACF,OAAlB;AACAX,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB,cAArB;AAEH;AACJ,CArBD;AAwBAmE,MAAM,CAACC,OAAP,GAAiB3F,MAAjB","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst auth = require('../../middleware/auth');\r\nconst { check, validationResult } = require('express-validator');\r\nconst request = require('request');\r\nconst config = require('config');\r\n\r\nconst Profile = require('../../models/Profile');\r\nconst User = require('../../models/User');\r\n\r\n//GET api/profile/me\r\n// GET api/profiles - all profile users\r\n//me - user id thats in the token\r\nrouter.get('/me', auth, async (req, res) => {\r\n\r\n    try {\r\n\r\n        const profile = await Profile.findOne({ user: req.user.id }).populate({model: 'User', path: 'user', select: ['name', 'avatar']});\r\n\r\n        if(!profile) {\r\n\r\n            return res.status(400).json({ message: 'There is no profile for this user' });\r\n        }\r\n\r\n        res.send(profile);\r\n\r\n\r\n    }catch(err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server error');\r\n    }\r\n});\r\n\r\n// POST api/profile\r\n// Create or update user profile\r\nrouter.post('/', [auth, [\r\n\r\n check('status', 'Status is required').not().isEmpty(),\r\n check('skills', 'Skills is required').not().isEmpty()\r\n\r\n]], async (req, res) => {\r\n\r\n    const errors = validationResult(req);\r\n\r\n    if(!errors.isEmpty()) {\r\n\r\n        return res.status(400).json({ errors: errors.array() });\r\n    }\r\n\r\n    const {company, website, location, bio, status, githubusername, skills, facebook, twitter, instagram, linkedin } = req.body;\r\n\r\n    //Build profile object\r\n    const profileFields = {};\r\n    profileFields.user = req.user.id;\r\n    if(company) profileFields.company = company;\r\n    if(website) profileFields.website = website;\r\n    if(location) profileFields.location = location;\r\n    if(bio) profileFields.bio = bio;\r\n    if(status) profileFields.status = status;\r\n    if(githubusername) profileFields.githubusername = githubusername;\r\n    if(skills) {\r\n\r\n        profileFields.skills = skills.split(',').map(skill => skill.trim());\r\n    }\r\n\r\n    //Bield social object\r\n    profileFields.social = {};\r\n    \r\n    if(facebook) profileFields.social.facebook = facebook;\r\n    if(twitter) profileFields.social.twitter = twitter;\r\n    if(instagram) profileFields.social.instagram = instagram;\r\n    if(linkedin) profileFields.social.linkedin = linkedin;\r\n\r\n     try {\r\n\r\n        let profile = await Profile.findOne({ user: req.user.id });\r\n\r\n        if(profile) {\r\n\r\n            //Update\r\n            profile = await Profile.findOneAndUpdate(\r\n                \r\n                {user: req.user.id}, \r\n                {$set: profileFields},\r\n                {new: true}\r\n            )\r\n\r\n            return res.send(profile);\r\n        }\r\n\r\n        //Create Profile\r\n        profile = new Profile(profileFields);\r\n\r\n        await profile.save();\r\n\r\n        res.send(profile);\r\n\r\n\r\n     }catch(err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n     }\r\n\r\n\r\n})\r\n\r\n\r\n//GET api/profile\r\n// Get all profiles\r\nrouter.get('/', async (req, res) => {\r\n\r\n    try {\r\n\r\n        const profiles = await Profile.find().populate({model: 'User', path: 'user', select: ['name', 'avatar']});\r\n\r\n        if(!profiles) {\r\n\r\n            return res.status(400).json({ message: 'There is no profiles for this user' });\r\n        }\r\n\r\n        res.send(profiles);\r\n\r\n\r\n    }catch(err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n    }\r\n})\r\n\r\n\r\n// GET api/profile/user/:user_id\r\n// Get profile by user ID\r\nrouter.get('/user/:user_id', async (req, res) => {\r\n\r\n    try {\r\n\r\n        const profile = await Profile.findOne({user: req.params.user_id}).populate({ model: 'User', path: 'user', select: ['name', 'avatar']});\r\n\r\n        if(!profile) {\r\n\r\n            return res.status(400).json({message: 'There is no profile for this user'});\r\n        }\r\n\r\n        res.send(profile);\r\n\r\n\r\n    }catch(err) {\r\n\r\n        console.error(err.message);\r\n\r\n        if(err.kind == 'ObjectId') {\r\n\r\n            return res.status(400).json({ message: 'Profile not found' });\r\n        }\r\n        res.status(500).send('Server Error');\r\n    }\r\n})\r\n\r\n\r\n// GET api/profile/github/:username\r\n// Get user repos from Github\r\nrouter.get('/github/:username', async (req, res) => {\r\n\r\n    try {\r\n\r\n        const options = {\r\n\r\n          uri: `https://api.github.com/users/${req.params.username}/repos?per_page=5&sort=created:asc&client_id=${config.get('githubClientId')}&client_secret=${config.get('githubClientSecret')}`,\r\n\r\n          method: 'GET',\r\n          headers: { 'user-agent': 'node.js' }\r\n        }\r\n\r\n        request(options, (error, response, body) => {\r\n\r\n            if(error) console.error(error);\r\n\r\n            if(response.statusCode !== 200) {\r\n\r\n               return res.status(404).json({ message: 'No Github profile found' });\r\n            }\r\n\r\n            res.send(JSON.parse(body));\r\n        })\r\n        \r\n    } catch (err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n        \r\n    }\r\n\r\n\r\n})\r\n\r\n\r\n\r\n// PUT api/profile/experience\r\n// Add profile experience\r\nrouter.put('/experience', [auth, [\r\n\r\n   check('title', 'Title is required').not().isEmpty(),\r\n   check('company', 'Company is required').not().isEmpty(),\r\n  // check('to', 'To date is required').not().isEmpty(),\r\n   check('from', 'From date is required').not().isEmpty()\r\n\r\n\r\n]], async (req, res) => {\r\n\r\n    const errors = validationResult(req);\r\n    if(!errors.isEmpty()) {\r\n\r\n        return res.status(400).json({ errors: errors.array() });\r\n    }\r\n\r\n    const {title, company, location, from, to, current, description } = req.body;\r\n\r\n    const newExperience = {\r\n\r\n        title,\r\n        company,\r\n        location,\r\n        from,\r\n        to,\r\n        current,\r\n        description\r\n    }\r\n\r\n    try {\r\n\r\n        const profile = await Profile.findOne({ user: req.user.id });\r\n\r\n        profile.experience.unshift(newExperience);\r\n\r\n        await profile.save();\r\n\r\n        res.send(profile);\r\n\r\n\r\n    }catch(err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n    }\r\n\r\n})\r\n\r\n\r\n// PUT api/profile/education\r\n// Add profile education\r\nrouter.put('/education', [auth, [\r\n\r\ncheck('school', 'School is required').not().isEmpty(),\r\ncheck('degree', 'Degree is required').not().isEmpty(),\r\ncheck('fieldofstudy', 'Field of study is required').not().isEmpty(),\r\ncheck('from', 'From date is required').not().isEmpty()\r\n\r\n]], async (req, res) => {\r\n\r\n   const errors = validationResult(req);\r\n   if(!errors.isEmpty()) {\r\n\r\n    return res.status(400).json({ errors: errors.array() })\r\n   }\r\n\r\n   const {school, degree, fieldofstudy, from , to, current, description} = req.body;\r\n\r\n   const newEducation = {\r\n\r\n    school,\r\n    degree,\r\n    fieldofstudy, \r\n    from,\r\n    to,\r\n    current,\r\n    description\r\n   }\r\n\r\n\r\n   try {\r\n\r\n    const profile = await Profile.findOne({ user: req.user.id });\r\n\r\n    profile.education.unshift(newEducation);\r\n\r\n    await profile.save();\r\n\r\n    res.send(profile);\r\n       \r\n   } catch (err) {\r\n\r\n    console.error(err.message);\r\n    res.status(500).send('Server Error');\r\n       \r\n   }\r\n})\r\n\r\n//DELETE api/education\r\n// Delete education\r\nrouter.delete('/education/:edu_id', auth, async (req, res) => {\r\n\r\n    try {\r\n\r\n        const profile = await Profile.findOne({ user: req.user.id });\r\n\r\n        //Get removeIndex\r\n        const removeIndex = profile.education.map(item => item.id).indexOf(req.params.edu_id);\r\n\r\n        profile.education.splice(removeIndex, 1);\r\n\r\n        await profile.save();\r\n\r\n        res.send(profile);\r\n        \r\n    } catch (err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n        \r\n    }\r\n})\r\n\r\n\r\n// DELETE api/profile\r\n// Delete profile, user & posts\r\nrouter.delete('/', auth, async (req, res) => {\r\n\r\n    try {\r\n  //Remove Profile\r\n    await Profile.findOneAndRemove({ user: req.user.id });\r\n\r\n   //Remove User\r\n    await User.findOneAndRemove({_id: req.user.id})\r\n\r\n\r\n\r\n    res.send({ message: 'User deleted successfully' });\r\n    }catch(err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n    }\r\n})\r\n\r\n\r\n// DELETE api/profile/experience/:exp_id\r\n// Delete experience from profile\r\nrouter.delete('/experience/:exp_id', auth, async (req, res) => {\r\n\r\n    try {\r\n\r\n        const profile = await Profile.findOne({ user: req.user.id });\r\n\r\n        //Get remove index\r\n        const removeIndex = profile.experience.map(item => item.id).indexOf(req.params.exp_id);\r\n\r\n        profile.experience.splice(removeIndex, 1);\r\n\r\n        await profile.save();\r\n\r\n        res.send(profile);\r\n        \r\n    } catch (err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n        \r\n    }\r\n})\r\n\r\n\r\nmodule.exports = router;"]},"metadata":{},"sourceType":"script"}