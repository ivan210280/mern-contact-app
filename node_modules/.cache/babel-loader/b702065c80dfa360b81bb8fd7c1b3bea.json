{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst auth = require('../../middleware/auth');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst config = require('config');\n\nconst jwt = require('jsonwebtoken');\n\nconst bcrypt = require('bcryptjs');\n\nconst User = require('../../models/User'); //GET api/auth\n\n\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    res.send(user);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n}); // POST api/auth\n// Authenticate user & get token\n\nrouter.post('/', [check('email', 'Please include a valid email').isEmail(), check('password', 'Password must be at least 6 characters long').exists()], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    //See if user exists\n    let user = await User.findOne({\n      email\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        errors: [{\n          message: 'Invalid credentials'\n        }]\n      });\n    } //Compering the passwords\n\n\n    const isMatch = await bcrypt.compare(password, user.password);\n\n    if (!isMatch) {\n      return res.status(400).json({\n        errors: [{\n          message: 'Invalid credentials'\n        }]\n      });\n    } //Return jsonwebtoken\n\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jwt.sign(payload, config.get('jwtSecret'), {\n      expiresIn: 360000\n    }, (err, token) => {\n      if (err) throw err;\n      res.json({\n        token\n      });\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Users/Dell/Desktop/socialnetwork/routes/api/auth.js"],"names":["express","require","router","Router","auth","check","validationResult","config","jwt","bcrypt","User","get","req","res","user","findById","id","select","send","err","console","error","message","status","post","isEmail","exists","errors","isEmpty","json","array","email","password","body","findOne","isMatch","compare","payload","sign","expiresIn","token","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst auth = require('../../middleware/auth');\r\nconst { check, validationResult } = require('express-validator');\r\nconst config = require('config');\r\nconst jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcryptjs');\r\n\r\nconst User = require('../../models/User');\r\n\r\n//GET api/auth\r\nrouter.get('/', auth, async (req, res) => {\r\n\r\n    try {\r\n\r\n     const user = await User.findById(req.user.id).select('-password');\r\n\r\n     res.send(user);\r\n\r\n\r\n    }catch(err) {\r\n\r\n      console.error(err.message);\r\n      res.status(500).send('Server error');\r\n    }\r\n});\r\n\r\n// POST api/auth\r\n// Authenticate user & get token\r\nrouter.post('/', [\r\n\r\n    check('email', 'Please include a valid email').isEmail(),\r\n    check('password', 'Password must be at least 6 characters long').exists()\r\n\r\n], async (req, res) => {\r\n\r\n     const errors = validationResult(req);\r\n\r\n     if(!errors.isEmpty()) {\r\n\r\n        return res.status(400).json({ errors: errors.array()});\r\n     }\r\n\r\n     const { email, password } = req.body;\r\n\r\n     try {\r\n\r\n        //See if user exists\r\n        let user = await User.findOne({ email });\r\n\r\n        if(!user) {\r\n\r\n            return res.status(400).json({errors: [{message: 'Invalid credentials'}]});\r\n        }\r\n\r\n\r\n        //Compering the passwords\r\n        const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n        if(!isMatch) {\r\n\r\n            return res.status(400).json({errors: [{message: 'Invalid credentials'}]});\r\n        }\r\n       \r\n\r\n        //Return jsonwebtoken\r\n        const payload = {\r\n\r\n            user: {\r\n\r\n                id: user.id\r\n            }\r\n        }\r\n\r\n        jwt.sign(payload, config.get('jwtSecret'),\r\n        {expiresIn: 360000},\r\n        (err, token) => {\r\n\r\n            if(err) throw err;\r\n\r\n            res.json({ token });\r\n        })\r\n\r\n\r\n     }catch(err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server error');\r\n     }\r\n})\r\n\r\n   \r\n\r\n\r\nmodule.exports = router;"]},"metadata":{},"sourceType":"script"}