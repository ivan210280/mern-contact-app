{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alertAction\";\nimport { ACCOUNT_DELETED, CLEAR_PROFILE, GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE } from \"./types\"; //Get current users profile\n\nexport const getProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.data.message,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all Profiles\n// Create or update user Profile\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.post('/api/profile', body, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Your Profile has been updated successfully' : 'Your Profile has been created successfully', 'success'));\n\n    if (!edit) {\n      history.push('/dashboard');\n    }\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.data.message,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Experience\n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.put('/api/profile/experience', body, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Your Experience added successfully', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.data.message,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Education\n\nexport const addEducation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.put('/api/profile/education', body, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Your Education added successfully', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.data.message,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete experience\n\nexport const deleteExperience = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/experience/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('One Experience deleted successfully'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete education\n\nexport const deleteEducation = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/education/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('One Education deleted successfully', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete account && profile\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Are you sure you want permanently to delete your account!')) {\n    try {\n      const res = await axios.delete('/api/profile');\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert('Your Account has been deleted successfully', 'success'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Dell/Desktop/socialnetwork/client/src/actions/profileAction.js"],"names":["axios","setAlert","ACCOUNT_DELETED","CLEAR_PROFILE","GET_PROFILE","PROFILE_ERROR","UPDATE_PROFILE","getProfile","dispatch","res","get","type","payload","data","err","msg","response","message","status","createProfile","formData","history","edit","config","headers","body","JSON","stringify","post","push","errors","forEach","error","addExperience","put","addEducation","deleteExperience","id","delete","statusText","deleteEducation","deleteAccount","window","confirm"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { setAlert } from \"./alertAction\";\r\nimport {  ACCOUNT_DELETED, CLEAR_PROFILE, GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE } from \"./types\";\r\n\r\n//Get current users profile\r\nexport const getProfile = () => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await axios.get('/api/profile/me');\r\n\r\n        dispatch({\r\n\r\n            type: GET_PROFILE,\r\n            payload: res.data\r\n        })\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: PROFILE_ERROR,\r\n            payload: {msg: err.response.data.message, status: err.response.status}\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Get all Profiles\r\n\r\n\r\n\r\n// Create or update user Profile\r\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\r\n\r\n    try {\r\n\r\n        const config = {\r\n\r\n            headers: {\r\n\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n       const body = JSON.stringify(formData)\r\n\r\n       const res = await axios.post('/api/profile', body, config);\r\n\r\n       dispatch({\r\n\r\n        type: GET_PROFILE,\r\n        payload: res.data\r\n       })\r\n\r\n       dispatch(setAlert(edit ? 'Your Profile has been updated successfully' : 'Your Profile has been created successfully', 'success'));\r\n\r\n       if(!edit) {\r\n\r\n       history.push('/dashboard');\r\n       }\r\n        \r\n    } catch (err) {\r\n\r\n        const errors = err.response.data.errors;\r\n\r\n        if(errors) {\r\n\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n\r\n        dispatch({\r\n\r\n            type: PROFILE_ERROR,\r\n            payload: { msg: err.response.data.message, status: err.response.status }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Add Experience\r\nexport const addExperience = (formData, history) => async dispatch => {\r\n\r\n    try {\r\n\r\n        const config = {\r\n\r\n            headers: {\r\n\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        const body = JSON.stringify(formData);\r\n\r\n        const res = await axios.put('/api/profile/experience', body, config);\r\n\r\n        dispatch({\r\n\r\n            type: UPDATE_PROFILE,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch(setAlert('Your Experience added successfully', 'success'));\r\n\r\n        history.push('/dashboard');\r\n\r\n\r\n        \r\n    } catch (err) {\r\n\r\n        const errors = err.response.data.errors;\r\n\r\n        if(errors) {\r\n\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n\r\n        dispatch({\r\n\r\n            type: PROFILE_ERROR,\r\n            payload: { msg: err.response.data.message, status: err.response.status }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Add Education\r\nexport const addEducation = (formData, history) => async dispatch => {\r\n\r\n    try {\r\n\r\n        const config = {\r\n\r\n            headers: {\r\n\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const body = JSON.stringify(formData);\r\n\r\n        const res = await axios.put('/api/profile/education', body, config);\r\n\r\n        dispatch({\r\n\r\n            type: UPDATE_PROFILE,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch(setAlert('Your Education added successfully', 'success'));\r\n\r\n        history.push('/dashboard');\r\n        \r\n    } catch (err) {\r\n\r\n        const errors = err.response.data.errors;\r\n\r\n        if(errors) {\r\n\r\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n\r\n        }\r\n\r\n        dispatch({\r\n\r\n            type: PROFILE_ERROR,\r\n            payload: { msg: err.response.data.message, status: err.response.status }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Delete experience\r\nexport const deleteExperience = id => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await axios.delete(`/api/profile/experience/${id}`);\r\n\r\n        dispatch({\r\n\r\n            type: UPDATE_PROFILE,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch(setAlert('One Experience deleted successfully'));\r\n        \r\n    } catch (err) {\r\n\r\n         dispatch({\r\n\r\n            type: PROFILE_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Delete education\r\nexport const deleteEducation = id => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await axios.delete(`/api/profile/education/${id}`);\r\n\r\n        dispatch({\r\n\r\n            type: UPDATE_PROFILE,\r\n            payload: res.data\r\n        })\r\n\r\n        dispatch(setAlert('One Education deleted successfully', 'success'));\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: PROFILE_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status}\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Delete account && profile\r\nexport const deleteAccount = () => async dispatch => {\r\n\r\n    if(window.confirm('Are you sure you want permanently to delete your account!')) {\r\n\r\n        try {\r\n\r\n            const res = await axios.delete('/api/profile');\r\n\r\n            dispatch({\r\n\r\n                type: CLEAR_PROFILE\r\n            })\r\n\r\n            dispatch({\r\n\r\n                type: ACCOUNT_DELETED\r\n            })\r\n\r\n            dispatch(setAlert('Your Account has been deleted successfully', 'success'))\r\n            \r\n        } catch (err) {\r\n\r\n            dispatch({\r\n\r\n                type: PROFILE_ERROR,\r\n                payload: { msg: err.response.statusText, status: err.response.status}\r\n            })\r\n            \r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}