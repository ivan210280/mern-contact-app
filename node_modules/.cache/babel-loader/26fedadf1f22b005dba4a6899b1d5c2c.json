{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst auth = require('../../middleware/auth');\n\nconst Post = require('../../models/Post');\n\nconst Profile = require('../../models/Profile');\n\nconst User = require('../../models/User'); // POST api/posts\n// Create a post\n\n\nrouter.post('/', [auth, [check('text', 'Text is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    const newPost = new Post({\n      text: req.body.text,\n      name: user.name,\n      avatar: user.avatar,\n      user: req.user.id\n    });\n    const post = await newPost.save();\n    res.send(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send({\n      message: 'Server Error'\n    });\n  }\n}); // GET api/posts\n// Get all posts\n\nrouter.get('/', auth, async (req, res) => {\n  try {\n    // const user = await User.findById(req.user.id).select('-password');\n    const posts = await Post.find().sort({\n      date: -1\n    });\n    res.send(posts);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // GET api/posts/:id\n// Get Posts by ID\n\nrouter.get('/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) {\n      return res.status(404).json({\n        message: 'Post not found'\n      });\n    }\n\n    res.send(post);\n  } catch (err) {\n    console.error(err.message);\n\n    if (err.kind === 'ObjectId') {\n      return res.status(404).json({\n        message: 'Post not found'\n      });\n    }\n\n    res.status(500).send('Server Error');\n  }\n}); // POST api/posts/comment/:id\n// Comment on a post\n\nrouter.post('/comment/:id', [auth, [check('text', 'Text is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    const post = await Post.findById(req.params.id);\n    const newComment = {\n      user: req.user.id,\n      text: req.body.text,\n      name: user.name,\n      avatar: user.avatar\n    };\n    post.comments.unshift(newComment);\n    await post.save();\n    res.send(post.comments);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // PUT api/posts/like/:id\n// Like a post\n\nrouter.put('/like/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id); // Check if the post has already been liked\n\n    if (post.likes.filter(like => like.user.toString() === req.user.id).length > 0) {\n      return res.status(400).json({\n        message: 'Post already liked'\n      });\n    }\n\n    post.likes.unshift({\n      user: req.user.id\n    });\n    await post.save();\n    res.send(post.likes);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send({\n      message: 'Server Error'\n    });\n  }\n}); // PUT api/posts/unlike/:id\n// Unlike a post\n\nrouter.put('/unlike/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id); // Chck if post unlike\n\n    if (post.likes.filter(like => like.user.toString() === req.user.id).length === 0) {\n      return res.status(400).json({\n        message: 'Post has not been liked yet'\n      });\n    } // Get remove index\n\n\n    const removeIndex = post.likes.map(like => like.user.toString()).indexOf(req.user.id);\n    post.likes.splice(removeIndex, 1);\n    await post.save();\n    res.send(post.likes);\n  } catch (err) {\n    console.error(err.message);\n    res.status(400).send('Server Error');\n  }\n}); // DELETE api/posts/:id\n// Delete a post\n\nrouter.delete('/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) {\n      return res.status(404).json({\n        message: 'Post not found'\n      });\n    } //Check user\n\n\n    if (post.user.toString() !== req.user.id) {\n      return res.status(401).json({\n        message: 'User not authorized'\n      });\n    }\n\n    await post.remove();\n    res.send({\n      message: 'Post removed successfully'\n    });\n  } catch (err) {\n    console.error(error);\n\n    if (err.kind === 'ObjectId') {\n      return res.status(404).json({\n        message: 'Post not found'\n      });\n    }\n\n    res.status(500).send('Server Error');\n  }\n}); // DELETE api/posts/comment/:id/:comment_id\n// Delete comment\n\nrouter.delete('/comment/:id/:comment_id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id); // Pull out comment\n\n    const comment = post.comments.find(comment => comment.id === req.params.comment_id); // Make sure comment exist\n\n    if (!comment) {\n      return res.status(404).json({\n        message: 'Comment does not exist'\n      });\n    } // Check user\n\n\n    if (comment.user.toString() !== req.user.id) {\n      return res.status(401).json({\n        message: 'User not authorized'\n      });\n    } // Get remove index\n\n\n    const removeIndex = post.comments.map(comment => comment.user.toString()).indexOf(req.user.id);\n    post.comments.splice(removeIndex, 1);\n    await post.save();\n    res.send(post.comments);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Users/Dell/Desktop/socialnetwork/routes/api/posts.js"],"names":["express","require","router","Router","check","validationResult","auth","Post","Profile","User","post","not","isEmpty","req","res","errors","status","json","array","user","findById","id","select","newPost","text","body","name","avatar","save","send","err","console","error","message","get","posts","find","sort","date","params","kind","newComment","comments","unshift","put","likes","filter","like","toString","length","removeIndex","map","indexOf","splice","delete","remove","comment","comment_id","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst { check, validationResult } = require('express-validator');\r\nconst auth = require('../../middleware/auth');\r\n\r\nconst Post = require('../../models/Post');\r\nconst Profile = require('../../models/Profile');\r\nconst User = require('../../models/User');\r\n\r\n// POST api/posts\r\n// Create a post\r\nrouter.post('/', [auth, [\r\n\r\n    check('text', 'Text is required').not().isEmpty()\r\n]], async (req, res) => {\r\n\r\n    const errors = validationResult(req);\r\n    if(!errors.isEmpty()) {\r\n\r\n        return res.status(400).json({ errors: errors.array() })\r\n    }\r\n\r\n    try {\r\n\r\n        const user = await User.findById(req.user.id).select('-password');\r\n\r\n        const newPost = new Post({\r\n\r\n            text: req.body.text,\r\n            name: user.name,\r\n            avatar: user.avatar,\r\n            user: req.user.id\r\n        })\r\n\r\n        const post = await newPost.save();\r\n\r\n        res.send(post);\r\n        \r\n    } catch (err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send({message: 'Server Error'});\r\n        \r\n    }\r\n});\r\n\r\n// GET api/posts\r\n// Get all posts\r\nrouter.get('/', auth, async (req, res) => {\r\n\r\n    try {\r\n\r\n       // const user = await User.findById(req.user.id).select('-password');\r\n\r\n        const posts = await Post.find().sort({ date: -1 });\r\n\r\n        res.send(posts);\r\n        \r\n    } catch (err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n        \r\n    }\r\n})\r\n\r\n\r\n// GET api/posts/:id\r\n// Get Posts by ID\r\nrouter.get('/:id', auth, async (req, res) => {\r\n\r\n    try {\r\n\r\n        const post = await Post.findById(req.params.id);\r\n\r\n        if(!post) {\r\n\r\n            return res.status(404).json({ message: 'Post not found' });\r\n\r\n            \r\n        }\r\n\r\n        res.send(post);\r\n        \r\n    } catch (err) {\r\n\r\n        console.error(err.message);\r\n        if(err.kind === 'ObjectId') {\r\n\r\n            return res.status(404).json({ message: 'Post not found' });\r\n        }\r\n        res.status(500).send('Server Error');\r\n        \r\n    }\r\n})\r\n\r\n// POST api/posts/comment/:id\r\n// Comment on a post\r\nrouter.post('/comment/:id', [auth, [\r\n\r\n    check('text', 'Text is required').not().isEmpty()\r\n]], async (req, res) => {\r\n\r\n    const errors = validationResult(req);\r\n    if(!errors.isEmpty()) {\r\n\r\n        return res.status(400).json({errors: errors.array()})\r\n    }\r\n\r\n    try {\r\n\r\n      const user = await User.findById(req.user.id).select('-password');\r\n\r\n      const post = await Post.findById(req.params.id);\r\n\r\n      const newComment = {\r\n\r\n        user: req.user.id,\r\n        text: req.body.text,\r\n        name: user.name,\r\n        avatar: user.avatar\r\n        \r\n      }\r\n\r\n      post.comments.unshift(newComment)\r\n\r\n       await post.save();\r\n\r\n      res.send(post.comments);\r\n        \r\n    } catch (err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error')\r\n        \r\n    }\r\n})\r\n\r\n\r\n// PUT api/posts/like/:id\r\n// Like a post\r\nrouter.put('/like/:id', auth, async (req, res) => {\r\n\r\n    try {\r\n\r\n        const post = await Post.findById(req.params.id);\r\n\r\n        // Check if the post has already been liked\r\n        if(post.likes.filter(like => like.user.toString() === req.user.id).length > 0) {\r\n\r\n            return res.status(400).json({ message: 'Post already liked' });\r\n        }\r\n\r\n        post.likes.unshift({ user: req.user.id });\r\n\r\n        await post.save();\r\n\r\n        res.send(post.likes);\r\n        \r\n    } catch (err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send({ message: 'Server Error' });\r\n        \r\n    }\r\n})\r\n\r\n\r\n// PUT api/posts/unlike/:id\r\n// Unlike a post\r\nrouter.put('/unlike/:id', auth, async (req, res) => {\r\n\r\n    try {\r\n\r\n        const post = await Post.findById(req.params.id)\r\n\r\n        // Chck if post unlike\r\n        if(post.likes.filter(like => like.user.toString() === req.user.id).length === 0) {\r\n\r\n            return res.status(400).json({message: 'Post has not been liked yet'});\r\n        }\r\n\r\n        // Get remove index\r\n        const removeIndex = post.likes.map(like => like.user.toString()).indexOf(req.user.id);\r\n\r\n        post.likes.splice(removeIndex, 1);\r\n\r\n        await post.save();\r\n\r\n        res.send(post.likes);\r\n        \r\n    } catch (err) {\r\n\r\n        console.error(err.message);\r\n        res.status(400).send('Server Error');\r\n        \r\n    }\r\n})\r\n\r\n// DELETE api/posts/:id\r\n// Delete a post\r\nrouter.delete('/:id', auth, async (req, res) => {\r\n\r\n    try {\r\n\r\n        const post = await Post.findById(req.params.id);\r\n\r\n        if(!post) {\r\n\r\n            return res.status(404).json({ message: 'Post not found' })\r\n        }\r\n\r\n        //Check user\r\n        if(post.user.toString() !== req.user.id) {\r\n\r\n            return res.status(401).json({ message: 'User not authorized' });\r\n        }\r\n\r\n        await post.remove();\r\n\r\n        res.send({ message: 'Post removed successfully' });\r\n        \r\n    } catch (err) {\r\n\r\n        console.error(error);\r\n        if(err.kind === 'ObjectId') {\r\n\r\n            return res.status(404).json({ message: 'Post not found' });\r\n        }\r\n        res.status(500).send('Server Error');\r\n        \r\n    }\r\n})\r\n\r\n\r\n// DELETE api/posts/comment/:id/:comment_id\r\n// Delete comment\r\nrouter.delete('/comment/:id/:comment_id', auth, async (req, res) => {\r\n\r\n    try {\r\n\r\n        const post = await Post.findById(req.params.id);\r\n\r\n        // Pull out comment\r\n        const comment = post.comments.find(comment => comment.id === req.params.comment_id);\r\n\r\n        // Make sure comment exist\r\n        if(!comment) {\r\n\r\n            return res.status(404).json({ message: 'Comment does not exist' })\r\n        }\r\n\r\n        // Check user\r\n        if(comment.user.toString() !== req.user.id) {\r\n\r\n            return res.status(401).json({ message: 'User not authorized' });\r\n        }\r\n\r\n        // Get remove index\r\n        const removeIndex = post.comments.map(comment => comment.user.toString()).indexOf(req.user.id);\r\n\r\n        post.comments.splice(removeIndex, 1);\r\n\r\n        await post.save();\r\n\r\n        res.send(post.comments);\r\n        \r\n    } catch (err) {\r\n\r\n        console.error(err.message);\r\n        res.status(500).send('Server Error');\r\n        \r\n    }\r\n})\r\n\r\n\r\n\r\n\r\nmodule.exports = router;"]},"metadata":{},"sourceType":"script"}