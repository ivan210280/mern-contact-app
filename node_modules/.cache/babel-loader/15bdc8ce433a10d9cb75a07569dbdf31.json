{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alertAction';\nimport setAuthToken from '../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './types'; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config); //const data = await response.json();\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // LOGIN User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n}; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Dell/Desktop/socialnetwork/client/src/actions/authAction.js"],"names":["axios","setAlert","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","register","name","email","password","dispatch","config","headers","body","JSON","stringify","res","post","type","payload","data","loadUser","err","errors","response","forEach","error","msg","login","logout","localStorage","token","get"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alertAction';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport {\r\n\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    CLEAR_PROFILE\r\n\r\n} from './types';\r\n\r\n\r\n// Register User\r\nexport const register = ({name, email, password}) => async dispatch => {\r\n\r\n   const config = {\r\n\r\n    headers: {\r\n\r\n        'Content-Type': 'application/json'\r\n    }\r\n   }\r\n\r\n  const body = JSON.stringify({name, email, password})\r\n\r\n   try {\r\n\r\n    const res = await axios.post('/api/users', body, config);\r\n\r\n    //const data = await response.json();\r\n\r\n    dispatch({\r\n\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data\r\n\r\n    })\r\n\r\n    dispatch(loadUser());\r\n       \r\n   } catch (err) {\r\n\r\n    const errors = err.response.data.errors;\r\n\r\n    if(errors) {\r\n\r\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    \r\n    dispatch({\r\n\r\n        type: REGISTER_FAIL\r\n        \r\n    })\r\n    \r\n       \r\n   }\r\n}\r\n\r\n\r\n// LOGIN User\r\nexport const login = (email, password) => async dispatch => {\r\n\r\n    const config = {\r\n\r\n        headers: {\r\n\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({ email, password });\r\n\r\n    try {\r\n\r\n        const res = await axios.post('/api/auth', body, config);\r\n\r\n         dispatch({\r\n\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n         })\r\n\r\n         dispatch(loadUser());\r\n        \r\n    } catch (err) {\r\n\r\n        const errors = err.response.data.errors;\r\n\r\n        if(errors) {\r\n\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n\r\n         dispatch({\r\n\r\n            type: LOGIN_FAIL\r\n         })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Logout / Clear Profile\r\nexport const logout = () => dispatch => {\r\n\r\n    dispatch({\r\n\r\n        type: LOGOUT\r\n    });\r\n\r\n    dispatch({\r\n\r\n        type: CLEAR_PROFILE\r\n    })\r\n}\r\n\r\n\r\n// Load User\r\nexport const loadUser = () => async dispatch => {\r\n\r\n    if(localStorage.token) {\r\n\r\n        setAuthToken(localStorage.token);\r\n    }\r\n\r\n    try {\r\n\r\n        const res = await axios.get('/api/auth');\r\n\r\n        dispatch({\r\n\r\n            type: USER_LOADED,\r\n            payload: res.data\r\n        })\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: AUTH_ERROR\r\n        })\r\n        \r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}