{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alertAction\";\nimport { useLocation } from \"react-router-dom\";\nimport { CREATE_PROFILE, GET_PROFILE, PROFILE_ERROR } from \"./types\"; //Get current users profile\n\nexport const getProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.data.message,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create or update user Profile\n\nexport const createProfile = (formData, history, edit = false) => {\n  var _s = $RefreshSig$();\n\n  return _s(async dispatch => {\n    _s();\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const body = JSON.stringify({\n        formData\n      });\n      const res = await axios.post('/api/profile', body, config);\n      dispatch({\n        type: GET_PROFILE,\n        payload: res.data\n      });\n      dispatch(setAlert(edit ? 'Your Profile has been updated successfully' : 'Your Profile has been created successfully', 'success'));\n\n      if (!edit) {\n        const location = useLocation();\n        history.push('/dashboard');\n      }\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.data.message,\n          status: err.response.status\n        }\n      });\n    }\n  }, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n    return [useLocation];\n  });\n};","map":{"version":3,"sources":["C:/Users/Dell/Desktop/socialnetwork/client/src/actions/profileAction.js"],"names":["axios","setAlert","useLocation","CREATE_PROFILE","GET_PROFILE","PROFILE_ERROR","getProfile","dispatch","res","get","type","payload","data","err","msg","response","message","status","createProfile","formData","history","edit","config","headers","body","JSON","stringify","post","location","push","errors","forEach","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,cAAT,EAAyBC,WAAzB,EAAsCC,aAAtC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAE9C,MAAI;AAEA,UAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAU,iBAAV,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AAELG,MAAAA,IAAI,EAAEN,WAFD;AAGLO,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAHR,KAAD,CAAR;AAMH,GAVD,CAUE,OAAOC,GAAP,EAAY;AAEVN,IAAAA,QAAQ,CAAC;AAELG,MAAAA,IAAI,EAAEL,aAFD;AAGLM,MAAAA,OAAO,EAAE;AAACG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBI,OAAxB;AAAiCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAAtD;AAHJ,KAAD,CAAR;AAMH;AACJ,CArBM,C,CAwBP;;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,IAAI,GAAG,KAA3B;AAAA;;AAAA,YAAqC,MAAMd,QAAN,IAAkB;AAAA;;AAEhF,QAAI;AAEA,YAAMe,MAAM,GAAG;AAEXC,QAAAA,OAAO,EAAE;AAEL,0BAAgB;AAFX;AAFE,OAAf;AAQD,YAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACP,QAAAA;AAAD,OAAf,CAAb;AAEA,YAAMX,GAAG,GAAG,MAAMR,KAAK,CAAC2B,IAAN,CAAW,cAAX,EAA2BH,IAA3B,EAAiCF,MAAjC,CAAlB;AAEAf,MAAAA,QAAQ,CAAC;AAERG,QAAAA,IAAI,EAAEN,WAFE;AAGRO,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAHL,OAAD,CAAR;AAMAL,MAAAA,QAAQ,CAACN,QAAQ,CAACoB,IAAI,GAAG,4CAAH,GAAkD,4CAAvD,EAAqG,SAArG,CAAT,CAAR;;AAEA,UAAG,CAACA,IAAJ,EAAU;AAEV,cAAMO,QAAQ,GAAG1B,WAAW,EAA5B;AACCkB,QAAAA,OAAO,CAACS,IAAR,CAAa,YAAb;AACA;AAEH,KA5BD,CA4BE,OAAOhB,GAAP,EAAY;AAEV,YAAMiB,MAAM,GAAGjB,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBkB,MAAjC;;AAEA,UAAGA,MAAH,EAAW;AAEPA,QAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAIzB,QAAQ,CAACN,QAAQ,CAAC+B,KAAK,CAAClB,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AAEDP,MAAAA,QAAQ,CAAC;AAELG,QAAAA,IAAI,EAAEL,aAFD;AAGLM,QAAAA,OAAO,EAAE;AAACG,UAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBI,OAAxB;AAAiCC,UAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAAtD;AAHJ,OAAD,CAAR;AAMH;AACJ,GA9C4B;AAAA,YA0BLf,WA1BK;AAAA;AAAA,CAAtB","sourcesContent":["import axios from \"axios\";\r\nimport { setAlert } from \"./alertAction\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { CREATE_PROFILE, GET_PROFILE, PROFILE_ERROR } from \"./types\";\r\n\r\n//Get current users profile\r\nexport const getProfile = () => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await axios.get('/api/profile/me');\r\n\r\n        dispatch({\r\n\r\n            type: GET_PROFILE,\r\n            payload: res.data\r\n        })\r\n        \r\n    } catch (err) {\r\n\r\n        dispatch({\r\n\r\n            type: PROFILE_ERROR,\r\n            payload: {msg: err.response.data.message, status: err.response.status}\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\n// Create or update user Profile\r\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\r\n\r\n    try {\r\n\r\n        const config = {\r\n\r\n            headers: {\r\n\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n       const body = JSON.stringify({formData})\r\n\r\n       const res = await axios.post('/api/profile', body, config);\r\n\r\n       dispatch({\r\n\r\n        type: GET_PROFILE,\r\n        payload: res.data\r\n       })\r\n\r\n       dispatch(setAlert(edit ? 'Your Profile has been updated successfully' : 'Your Profile has been created successfully', 'success'));\r\n\r\n       if(!edit) {\r\n\r\n       const location = useLocation()\r\n        history.push('/dashboard');\r\n       }\r\n        \r\n    } catch (err) {\r\n\r\n        const errors = err.response.data.errors;\r\n\r\n        if(errors) {\r\n\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n\r\n        dispatch({\r\n\r\n            type: PROFILE_ERROR,\r\n            payload: {msg: err.response.data.message, status: err.response.status}\r\n        })\r\n        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}